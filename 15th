#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#define ALPHABET_SIZE 26
#define MAX_TEXT_SIZE 1000
#define TOP_N 10  
const double english_freqs[ALPHABET_SIZE] = {
    8.2, 1.5, 2.8, 4.3, 13, 2.2, 2.0, 6.1, 7.0, 0.15,
    0.77, 4.0, 2.4, 6.7, 7.5, 1.9, 0.095, 6.0, 6.3, 9.1,
    2.8, 0.98, 2.4, 0.15, 2.0, 0.074
};
typedef struct {
    int shift;
    double score;
} ShiftScore;
void calculate_frequencies(const char *text, double *freqs) {
    int total = 0;
    int i;
    for (i = 0; i < ALPHABET_SIZE; i++) {
        freqs[i] = 0;
    }
    for (i = 0; text[i] != '\0'; i++) {
        if (isalpha(text[i])) {
            freqs[toupper(text[i]) - 'A']++;
            total++;
        }
    }
    if (total > 0) {
        for (i = 0; i < ALPHABET_SIZE; i++) {
            freqs[i] = (freqs[i] * 100) / total;
        }
    }
}
double calculate_chi_square(const double *observed, const double *expected) {
    double chi_square = 0;

    for (int i = 0; i < ALPHABET_SIZE; i++) {
        double diff = observed[i] - expected[i];
        chi_square += (diff * diff) / expected[i];
    }

    return chi_square;
}
void decrypt(const char *ciphertext, char *plaintext, int shift) {
    int i;   
    for (i = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            char base = isupper(ciphertext[i]) ? 'A' : 'a';
            plaintext[i] = (ciphertext[i] - base - shift + ALPHABET_SIZE) % ALPHABET_SIZE + base;
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[i] = '\0';
}
int compare_scores(const void *a, const void *b) {
    return ((ShiftScore*)a)->score > ((ShiftScore*)b)->score ? 1 : -1;
}
void frequency_attack(const char *ciphertext) {
    double observed_freqs[ALPHABET_SIZE];
    ShiftScore scores[ALPHABET_SIZE];
    char plaintext[MAX_TEXT_SIZE];
    for (int shift = 0; shift < ALPHABET_SIZE; shift++) {
        decrypt(ciphertext, plaintext, shift);
        calculate_frequencies(plaintext, observed_freqs);
        scores[shift].shift = shift;
        scores[shift].score = calculate_chi_square(observed_freqs, english_freqs);
    }
    qsort(scores, ALPHABET_SIZE, sizeof(ShiftScore), compare_scores);
    printf("\nTop %d most likely plaintexts:\n", TOP_N);
    for (int i = 0; i < TOP_N; i++) {
        decrypt(ciphertext, plaintext, scores[i].shift);
        printf("\nShift %d (Score: %.2f):\n%s\n", 
               scores[i].shift, scores[i].score, plaintext);
    }
}
int main() {
    char ciphertext[MAX_TEXT_SIZE];
    printf("Enter ciphertext (max %d characters):\n", MAX_TEXT_SIZE - 1);
    fgets(ciphertext, MAX_TEXT_SIZE, stdin);
    size_t len = strlen(ciphertext);
    if (len > 0 && ciphertext[len-1] == '\n') {
        ciphertext[len-1] = '\0';
    }
    frequency_attack(ciphertext);   
    return 0;
}
