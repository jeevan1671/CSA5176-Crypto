#include <stdio.h>
#include <stdlib.h>

// Function to find GCD using Euclidean algorithm
long long gcd(long long a, long long b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

// Extended Euclidean Algorithm to find multiplicative inverse
long long extended_euclidean(long long a, long long b, long long *x, long long *y) {
    if (b == 0) {
        *x = 1;
        *y = 0;
        return a;
    }

    long long x1, y1;
    long long gcd = extended_euclidean(b, a % b, &x1, &y1);

    *x = y1;
    *y = x1 - (a / b) * y1;

    return gcd;
}

// Function to find multiplicative inverse
long long mod_inverse(long long e, long long phi) {
    long long x, y;
    extended_euclidean(e, phi, &x, &y);

    // Make sure we return positive value
    return (x % phi + phi) % phi;
}

// Function to check if a number is prime
int is_prime(long long n) {
    if (n <= 1) return 0;
    if (n <= 3) return 1;

    if (n % 2 == 0 || n % 3 == 0) return 0;

    for (long long i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0)
            return 0;
    }
    return 1;
}

// Function to find prime factors
void find_prime_factors(long long n, long long *p, long long *q) {
    // For this specific case, we'll try to find factors of n=3599
    for (long long i = 2; i * i <= n; i++) {
        if (n % i == 0) {
            if (is_prime(i) && is_prime(n/i)) {
                *p = i;
                *q = n/i;
                return;
            }
        }
    }
}

int main() {
    long long e = 31;    // Public key
    long long n = 3599;  // Modulus
    long long p, q;      // Prime factors

    printf("Given:\n");
    printf("Public key (e) = %lld\n", e);
    printf("Modulus (n) = %lld\n", n);

    // Find prime factors p and q
    find_prime_factors(n, &p, &q);
    printf("\nPrime factors found:\n");
    printf("p = %lld\n", p);
    printf("q = %lld\n", q);

    // Calculate φ(n) = (p-1)(q-1)
    long long phi = (p - 1) * (q - 1);
    printf("φ(n) = (p-1)(q-1) = %lld\n", phi);

    // Find private key d using multiplicative inverse
    long long d = mod_inverse(e, phi);
    printf("\nPrivate key (d) = %lld\n", d);

    // Verify the result
    printf("\nVerification:\n");
    printf("(e * d) mod φ(n) = (%lld * %lld) mod %lld = %lld\n", 
           e, d, phi, (e * d) % phi);

    return 0;
}
