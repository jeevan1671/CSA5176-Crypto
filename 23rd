#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define BLOCK_SIZE 8

// S-DES Tables
int P10[] = {3, 5, 2, 7, 4, 10, 1, 9, 8, 6};
int P8[] = {6, 3, 7, 4, 8, 5, 10, 9};
int IP[] = {2, 6, 3, 1, 4, 8, 5, 7};
int EP[] = {4, 1, 2, 3, 2, 3, 4, 1};
int P4[] = {2, 4, 3, 1};
int IP_inverse[] = {4, 1, 3, 5, 7, 2, 8, 6};

// S-Boxes
int S0[4][4] = {
    {1, 0, 3, 2},
    {3, 2, 1, 0},
    {0, 2, 1, 3},
    {3, 1, 0, 2}
};

int S1[4][4] = {
    {0, 1, 2, 3},
    {2, 3, 1, 0},
    {3, 0, 1, 2},
    {2, 1, 0, 3}
};

// Function to increment counter
void increment_counter(char *counter) {
    int i = BLOCK_SIZE - 1;
    while (i >= 0) {
        if (counter[i] == '0') {
            counter[i] = '1';
            break;
        } else {
            counter[i] = '0';
            i--;
        }
    }
}

// Function to perform left circular shift
void left_shift(char *bits, int size) {
    char temp = bits[0];
    for(int i = 0; i < size-1; i++)
        bits[i] = bits[i+1];
    bits[size-1] = temp;
}

// Function to convert binary string to integer
int binary_to_int(char *binary, int len) {
    int result = 0;
    for(int i = 0; i < len; i++)
        result = result * 2 + (binary[i] - '0');
    return result;
}

// Function to convert integer to binary string
void int_to_binary(int num, char *binary, int len) {
    for(int i = len-1; i >= 0; i--) {
        binary[i] = (num & 1) + '0';
        num >>= 1;
    }
}

// Generate S-DES subkeys
void generate_keys(char *key, char *k1, char *k2) {
    char p10_result[10];
    char temp[10];

    // Apply P10
    for(int i = 0; i < 10; i++)
        p10_result[i] = key[P10[i]-1];

    // Split and shift for K1
    memcpy(temp, p10_result, 5);
    left_shift(temp, 5);
    memcpy(p10_result, temp, 5);
    memcpy(temp+5, p10_result+5, 5);
    left_shift(temp+5, 5);

    // Apply P8 to get K1
    for(int i = 0; i < 8; i++)
        k1[i] = temp[P8[i]-1];

    // Additional shifts for K2
    left_shift(temp, 5);
    left_shift(temp+5, 5);

    // Apply P8 to get K2
    for(int i = 0; i < 8; i++)
        k2[i] = temp[P8[i]-1];
}

// S-DES encryption of a single block
void sdes_encrypt_block(char *input, char *key, char *output) {
    char k1[8], k2[8];
    char temp[8], f_result[4];

    // Generate subkeys
    generate_keys(key, k1, k2);

    // Initial Permutation
    for(int i = 0; i < 8; i++)
        temp[i] = input[IP[i]-1];

    // First round
    // EP-box and XOR with key
    char expanded[8];
    for(int i = 0; i < 8; i++)
        expanded[i] = temp[EP[i]-1];
    for(int i = 0; i < 8; i++)
        expanded[i] = ((expanded[i] - '0') ^ (k1[i] - '0')) + '0';

    // S-boxes
    int row = binary_to_int(&expanded[0], 2);
    int col = binary_to_int(&expanded[2], 2);
    int_to_binary(S0[row][col], f_result, 2);

    row = binary_to_int(&expanded[4], 2);
    col = binary_to_int(&expanded[6], 2);
    int_to_binary(S1[row][col], &f_result[2], 2);

    // P4 and XOR
    char p4_result[4];
    for(int i = 0; i < 4; i++)
        p4_result[i] = f_result[P4[i]-1];
    for(int i = 0; i < 4; i++)
        temp[i] ^= p4_result[i] - '0';

    // Switch halves and repeat with K2
    char temp2[8];
    memcpy(temp2, temp + 4, 4);
    memcpy(temp2 + 4, temp, 4);

    // Final Permutation
    for(int i = 0; i < 8; i++)
        output[i] = temp2[IP_inverse[i]-1];
}

// CTR mode encryption
void ctr_encrypt(char *plaintext, char *key, char *counter, int length, char *ciphertext) {
    char counter_block[BLOCK_SIZE + 1];
    char encrypted_counter[BLOCK_SIZE + 1];

    for(int i = 0; i < length; i += BLOCK_SIZE) {
        // Copy and encrypt counter
        strcpy(counter_block, counter);
        sdes_encrypt_block(counter_block, key, encrypted_counter);

        // XOR with plaintext block
        for(int j = 0; j < BLOCK_SIZE && (i + j) < length; j++) {
            ciphertext[i + j] = ((plaintext[i + j] - '0') ^ 
                                (encrypted_counter[j] - '0')) + '0';
        }

        // Increment counter
        increment_counter(counter);
    }
}

// CTR mode decryption (same as encryption)
void ctr_decrypt(char *ciphertext, char *key, char *counter, int length, char *plaintext) {
    // In CTR mode, decryption is identical to encryption
    ctr_encrypt(ciphertext, key, counter, length, plaintext);
}

int main() {
    // Test data
    char key[] = "0111111101";
    char plaintext[] = "00000001000000100000001100000100";
    char counter[] = "00000000";
    char ciphertext[33] = {0};
    char decrypted[33] = {0};
    int length = strlen(plaintext);
    printf("Original plaintext: %s\n", plaintext);
    printf("Initial counter: %s\n", counter);
    ctr_encrypt(plaintext, key, counter, length, ciphertext);
    printf("Encrypted: %s\n", ciphertext);
    strcpy(counter, "00000000");
    ctr_decrypt(ciphertext, key, counter, length, decrypted);
    printf("Decrypted: %s\n", decrypted);   
    return 0;
}
